name: release-mac-osx

on: [workflow_dispatch, workflow_call]

jobs:
  release:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        
    - name: Install Tools
      run: brew install nasm automake
      
    - name: Vcpkg Integration
      run: $VCPKG_INSTALLATION_ROOT/vcpkg integrate install
      
    - name: Get Vcpkg current hash
      run: echo "vcpkg_current_hash=$(git -C $VCPKG_INSTALLATION_ROOT rev-parse --short HEAD)" >> $GITHUB_ENV
        
    - name: Restore vcpkg cache for x64
      uses: actions/cache@v2
      with:
        path: vcpkg/installed-x64-osx
        key: ${{runner.os}}-installed-x64-osx-${{env.vcpkg_current_hash}}-${{hashFiles('**/vcpkg.json')}}
        
    - name: Restore vcpkg cache for arm64
      uses: actions/cache@v2
      with:
        path: vcpkg/installed-arm64-osx
        key: ${{runner.os}}-installed-arm64-osx-${{env.vcpkg_current_hash}}-${{hashFiles('**/vcpkg.json')}}
        
    - name: Switch to Xcode 12.5.1
      run: sudo xcode-select --switch /Applications/Xcode_12.5.1.app
      
    - name: Install Dependencies
      run: cd vcpkg && ./install-x64-osx.sh && ./install-arm-osx.sh
      
    - name: Build
      run: cd PBProjects && xcodebuild -target "Aleph One" -target "Marathon" -target "Marathon 2" -target "Marathon Infinity" DEVELOPMENT_TEAM='' CODE_SIGN_IDENTITY='-' CODE_SIGN_STYLE='Automatic' build

    - name: Codesign app bundle
      # Extract the secrets we defined earlier as environment variables
      env: 
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        # Turn our base64-encoded certificate back to a regular .p12 file
    
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

        # We need to create a new keychain, otherwise using the certificate will prompt
        # with a UI dialog asking for the certificate password, which we can't
        # use in a headless CI environment
    
        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

        # We finally codesign our app bundle, specifying the Hardened runtime option
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime "$GITHUB_WORKSPACE/PBProjects/build/Release/Aleph One.app" -v
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime "$GITHUB_WORKSPACE/PBProjects/build/Release/Marathon.app" -v
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime "$GITHUB_WORKSPACE/PBProjects/build/Release/Marathon 2.app" -v        
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime "$GITHUB_WORKSPACE/PBProjects/build/Release/Marathon Infinity.app" -v      
    - name: Create DMGs
      run: cd tools && ./build_dmg.sh $GITHUB_WORKSPACE $GITHUB_WORKSPACE/PBProjects/build/Release
      
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: alephone-release
        if-no-files-found: error
        path: 'PBProjects/build/Release/*.dmg'